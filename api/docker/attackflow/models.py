from django.db import models
from django.core.validators import int_list_validator

# Proably best to use active voice for column names
class User(models.Model):
    user_id = models.AutoField(primary_key=True)
    username = models.CharField(max_length=64)
    password = models.CharField(max_length=64)
    first_name = models.CharField(max_length=64)
    last_name = models.CharField(max_length=64)

class CurrentReport(models.Model):
    report_id = models.AutoField(primary_key=True)
    report_name = models.CharField(max_length=256)
    attack_reporter = models.CharField(max_length=256)
    authors = models.CharField(max_length=256)
    attack_source = models.CharField(max_length=256)
    attack_date_time = models.DateTimeField()
    attack_location = models.CharField(max_length=256)
    attack_type = models.CharField(max_length=256)
    attack_victim = models.CharField(max_length=256)
    supporting_data = models.CharField(max_length=256)
    initial_response_actions = models.CharField(max_length=256)
    linked_reports = models.CharField(max_length=256, validators=int_list_validator)
    uploader = models.ForeignKey(User)
    contributors = models.CharField(max_length=256, validators=int_list_validator)
    approved_by = models.ForeignKey(User)
    date_created = models.DateField()
    date_modified = models.DateField()
    version = models.IntegerField()
    report_plaintext = models.TextField()
    tags = models.CharField(max_length=1024, validators=int_list_validator)

class LegacyReport(models.Model):
    report_id = models.AutoField(primary_key=True)
    attack_reporter = models.CharField(max_length=256)
    authors = models.CharField(max_length=256)
    attack_source = models.CharField(max_length=256)
    attack_date_time = models.DateTimeField()
    attack_location = models.CharField(max_length=256)
    attack_type = models.CharField(max_length=256)
    attack_victim = models.CharField(max_length=256)
    supporting_data = models.CharField(max_length=256)
    initial_response_actions = models.CharField(max_length=256)
    linked_reports = models.CharField(max_length=256, validators=int_list_validator)
    uploader = models.ForeignKey(User)
    contributors = models.CharField(max_length=256, validators=int_list_validator)
    approved_by = models.ForeignKey(User)
    date_created = models.DateField()
    date_modified = models.DateField()
    version = models.IntegerField()
    report_plaintext = models.TextField()
    tags = models.CharField(max_length=1024, validators=int_list_validator)

class PendingReport(models.Model):
    report_id = models.AutoField(primary_key=True)
    attack_reporter = models.CharField(max_length=256)
    authors = models.CharField(max_length=256)
    attack_source = models.CharField(max_length=256)
    attack_date_time = models.DateTimeField()
    attack_location = models.CharField(max_length=256)
    attack_type = models.CharField(max_length=256)
    attack_victim = models.CharField(max_length=256)
    supporting_data = models.CharField(max_length=256)
    initial_response_actions = models.CharField(max_length=256)
    linked_reports = models.CharField(max_length=256, validators=int_list_validator)
    uploader = models.ForeignKey(User)
    contributors = models.CharField(max_length=256, validators=int_list_validator)
    approved_by = models.ForeignKey(User)
    date_created = models.DateField()
    date_modified = models.DateField()
    version = models.IntegerField()
    report_plaintext = models.TextField()
    tags = models.CharField(max_length=1024, validators=int_list_validator)

class Tags(models.Model):
    tag_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=256)